1.创建数据对象
DataObject objs = DataObjectUtil.createDataObject("commonj.sdo.DataObject");
2.创建实体对象
DataObject checkExpert = DataObjectUtil.createDataObject("com.hse.person.model.OrgEmployee");
3.保存实体对象（无id则新增，有id为更新（会将其他传过来的参数值修改）
DatabaseUtil.saveEntity("default", expert);
4.根据实体对象查询数据
	1.查询一条数据
		DatabaseUtil.expandEntityByTemplate("default", orgData, orgData);
	2.实体类查询：查询所有满足条件的，返回数组
		DataObject[] objs=DatabaseUtil.queryEntitiesByTemplate("default", orgData)
	3.根据sql查询：
		Object[] result= DatabaseExt.queryByNamedSql("default","com.hse.workmanager.emergencyManage.monitorEarlyWarning.emergencyRescueEmpStatistics", sqlParam);

5.逻辑流获取userObject
   例如赋值：param/userId    m:userObject/userId
6.对象复制到新的对象
	riskMonitor=DataObjectUtil.convertDataObject(riskMonitor, "com.hse.workmanager.emergencyManage.emergencyWarning.EmergencyRiskMonitor", true);
7.java获取服务器路径
	（绝对路径）
	String templateDir = ApplicationContext.getInstance().getWarRealPath();
	（服务器路径）
	String templateDir = ApplicationContext.getInstance().getWebContextPath();
8.事务：
		ITransactionManager transc=TransactionManagerFactory.getTransactionManager();
		transc.begin();
		transc.rollback();
		transc.commit();
9.jsp获取缓存：
	<%@page import="com.eos.data.datacontext.IUserObject"%>
	<%@page import="java.util.Map"%>
	<%@page import="com.eos.data.datacontext.DataContextManager"%>
	<%@page import="com.eos.data.datacontext.IMUODataContext"%>
	<%
			IMUODataContext muo = DataContextManager.current().getMUODataContext();
			IUserObject userobject = muo.getUserObject();
			Map attributes=userobject.getAttributes();
			String roleList=(String)attributes.get("roleList");
			String username=userobject.getUserRealName();
			String userid=userobject.getUserId();
			String userorgid=userobject.getUserOrgId();
			String userorgname=userobject.getUserOrgName();
	%>

10.jsp权限：
<hkr:hasPermission funcCode="team_activity_plan_button">
</hkr:hasPermission>
11。java调逻辑流：
	PageCond page = PageCond.FACTORY.create();
	page.setSize(pageSize);
	page.setLength(pageSize);
	page.setIsCount(true);
	page.setBegin(pageSize * pageIndex);
	page.setCurrentPage(pageIndex);
	//创建逻辑流对象
	ILogicComponent comp = LogicComponentFactory.create("com.hse.workmanager.hrworktablebiz");
	//创建参数（参数数量和类型跟逻辑流参数对应）
	Object[] param = {page, pageSize, pageIndex, workTable};
	//执行逻辑流
	Object[] outParameters = comp.invoke("workTableListApi", param);
12.前端获取字典值：
	nui.getDictText(dictTypeId,dictId);